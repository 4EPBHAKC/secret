from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext
import asyncio
import datetime

# Token do bot
TOKEN = '7669234688:AAGQ3a-cNRwLwHuDvWwOIEpcVZt9Wq7FOrA'  # Substitua pelo seu token real

# Definindo a chave PIX (√∫nica para todos os planos)
PIX_KEY = 'lauracorreiamodel@gmail.com'  # Substitua pela sua chave PIX

# ID do administrador (voc√™)
ADMIN_ID = 7338492112  # Substitua pelo seu ID de usu√°rio no Telegram

# ID do supergrupo
GROUP_ID = "-1002278029742"  # Substitua pelo ID do seu grupo

# Dura√ß√£o dos planos em minutos
PLAN_DURATION = {
    'quinze_dias': 21600,  # 2 minutos (ajuste do plano quinzenal)
    'mensal': 43200,  # 30 dias em minutos
    'trimestral': 129600,  # 90 dias em minutos
    'vitalicio': None  # Vital√≠cio n√£o expira
}

# Armazenar os usu√°rios verificados (dicion√°rio: {user_id: nome})
verificados = {}

# Fun√ß√£o para enviar os planos
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("üü¢ Plano 15 dias - R$ 7,50", callback_data='quinze_dias')],
        [InlineKeyboardButton("üü¢ Plano Mensal - R$ 15,00", callback_data='mensal')],
        [InlineKeyboardButton("üü† Plano Trimestral - R$ 30,00", callback_data='trimestral')],
        [InlineKeyboardButton("üîµ Plano Vital√≠cio - R$ 50,00", callback_data='vitalicio')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        'üéâ Ol√°! Escolha um plano para se inscrever e aproveite nosso conte√∫do exclusivo! üéâ\n\nSelecione abaixo:', 
        reply_markup=reply_markup
    )

# Fun√ß√£o para exibir a chave PIX ap√≥s o plano ser escolhido
async def plan_choice(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    plan = query.data
    plan_name = {
        'quinze_dias': 'Plano 15 Dias',
        'mensal': 'Plano Mensal',
        'trimestral': 'Plano Trimestral',
        'vitalicio': 'Plano Vital√≠cio'
    }
    price = {
        'quinze_dias': 'R$ 7,50',
        'mensal': 'R$ 15,00',
        'trimestral': 'R$ 30,00',
        'vitalicio': 'R$ 50,00'
    }
    
    await query.edit_message_text(
        text=f"‚úÖ Voc√™ escolheu o {plan_name[plan]} - {price[plan]}.\n\nüí≥ Chave PIX: {PIX_KEY}\n\nüëâ Instru√ß√£o: Segure em cima do e-mail informado como chave PIX e clique em 'Copiar e-mail'. Depois, v√° at√© seu banco, cole o e-mail no campo de pagamento do PIX e conclua a transa√ß√£o.\n\nAp√≥s realizar o pagamento, clique em 'Pago' para confirmar! üèÅ"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ Pago", callback_data=f'pagamento_{plan}')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "ü§ë Clique em 'Pago' ap√≥s realizar o pagamento para confirmar sua inscri√ß√£o!", 
        reply_markup=reply_markup
    )

async def pagamento(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    plan = query.data.split('_')[1]
    user_name = query.from_user.first_name
    user_id = query.from_user.id

    # Verificando se o usu√°rio j√° est√° verificado
    if user_id in verificados:
        # Se o usu√°rio j√° estiver verificado, trata-se de uma mudan√ßa de plano
        verificados[user_id]['plano'] = plan  # Atualiza o plano
        
        # Verificando a expira√ß√£o: se n√£o for vital√≠cio, calcula a expira√ß√£o
        if plan != 'vitalicio':
            verificados[user_id]['expiracao'] = datetime.datetime.now() + datetime.timedelta(minutes=PLAN_DURATION.get(plan, 0))
        else:
            verificados[user_id]['expiracao'] = None  # Para plano vital√≠cio, n√£o h√° expira√ß√£o
        
        # Enviar mensagem de solicita√ß√£o de confirma√ß√£o ao administrador novamente
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üí∏ O usu√°rio {user_name} (ID: {user_id}) trocou de plano para {plan}. Verifique o pagamento e reenvie o link!",
            reply_markup=InlineKeyboardMarkup([ 
                [InlineKeyboardButton("‚úÖ Verificado", callback_data=f'verificado_{plan}_{user_id}')],
            ])
        )

        await query.edit_message_text(text="üëÄ O pagamento foi registrado. Aguardando a confirma√ß√£o do pagamento.")
    else:
        # Armazenando o usu√°rio verificado pela primeira vez
        verificados[user_id] = {
            'nome': user_name,
            'plano': plan,
            'expiracao': datetime.datetime.now() + datetime.timedelta(minutes=PLAN_DURATION.get(plan, 0)) if plan != 'vitalicio' else None
        }

        # Enviar mensagem de solicita√ß√£o de confirma√ß√£o ao administrador
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üí∏ O usu√°rio {user_name} (ID: {user_id}) informou que pagou o plano {plan}.\nüîÑ Clique para verificar!",
            reply_markup=InlineKeyboardMarkup([ 
                [InlineKeyboardButton("‚úÖ Verificado", callback_data=f'verificado_{plan}_{user_id}')],
            ])
        )

        await query.edit_message_text(text="üëÄ Aguardando a confirma√ß√£o do pagamento. Esse processo pode levar alguns minutos ou at√© algumas horas.")

# Fun√ß√£o para verificar o pagamento e gerar o link tempor√°rio
async def verificar_pagamento(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if query.from_user.id != ADMIN_ID:
        return

    plan_data = query.data.split('_')
    plan = plan_data[1]
    user_id = int(plan_data[2])

    # Verificando a dura√ß√£o do plano selecionado
    duration_minutes = PLAN_DURATION.get(plan, 0)

    if duration_minutes:
        expire_date = int((datetime.datetime.now() + datetime.timedelta(minutes=duration_minutes)).timestamp())
    else:
        expire_date = None  # N√£o expira para plano vital√≠cio

    link_temporario = await context.bot.create_chat_invite_link(
        chat_id=GROUP_ID,  # ID do supergrupo
        member_limit=1,
        expire_date=expire_date  # Passando o timestamp Unix
    )

    # Enviar link ao usu√°rio
    await context.bot.send_message(
        user_id, 
        text=f"üéâ Pagamento verificado para o {plan}! üéâ\n\nAcesse o grupo com o link abaixo (v√°lido por 3 minutos):\n{link_temporario.invite_link}\n\nBem-vindo! üëã"
    )

    await query.edit_message_text(text="‚úÖ Pagamento verificado! O link foi enviado ao usu√°rio.")

# Fun√ß√£o para listar os usu√°rios verificados
async def listar_verificados(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("Voc√™ n√£o tem permiss√£o para usar esse comando.")
        return

    if verificados:
        verified_users = "\n".join([
            f"{verificados[user_id]['nome']} (ID: {user_id}) - {verificados[user_id]['plano']} - "
            f"Expira em: {verificados[user_id]['expiracao'].strftime('%d/%m/%Y %H:%M') if verificados[user_id]['expiracao'] else 'Vital√≠cio'}"
            for user_id in verificados
        ])
        await update.message.reply_text(f"Usu√°rios verificados:\n{verified_users}")
    else:
        await update.message.reply_text("N√£o h√° usu√°rios verificados no momento.")

# Fun√ß√£o para remover um membro do grupo
async def remover_membro(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("Voc√™ n√£o tem permiss√£o para usar esse comando.")
        return

    if context.args:
        try:
            user_id = int(context.args[0])
            await context.bot.ban_chat_member(chat_id=GROUP_ID, user_id=user_id, revoke_messages=True)
            await update.message.reply_text(f"Usu√°rio com ID {user_id} foi removido do grupo.")
        except ValueError:
            await update.message.reply_text("Por favor, forne√ßa um ID v√°lido de usu√°rio.")
    else:
        await update.message.reply_text("Por favor, forne√ßa o ID do usu√°rio a ser removido.")

# Fun√ß√£o principal para rodar o bot
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(plan_choice, pattern='^(quinze_dias|mensal|trimestral|vitalicio)$'))
    application.add_handler(CallbackQueryHandler(pagamento, pattern='^pagamento_.*$'))
    application.add_handler(CallbackQueryHandler(verificar_pagamento, pattern='^verificado_.*$'))
    application.add_handler(CommandHandler('verificados', listar_verificados))
    application.add_handler(CommandHandler('remover', remover_membro))

    print("Bot est√° rodando...")
    application.run_polling()

if __name__ == '__main__':
    main()
